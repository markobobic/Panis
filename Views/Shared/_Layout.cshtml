<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="~/Content/Site.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
    <link href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Electrolize&display=swap" rel="stylesheet">

</head>

<body style="display:none">
    

    @Html.Action("_DashBoardPartial", "Home")
    <div id="contents">
        @RenderBody()
    </div>
    @Html.Partial("_Chat")
</body>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")

@RenderSection("scripts", required: false)


</html>

<script>
    $(document).ready(function () {
        $("body").show();
    });

</script>
<style>
    ::-webkit-scrollbar {
        background: transparent;
        width: 5px;
        height: 5px;
    }

    ::-webkit-scrollbar-thumb {
        background-color: #888;
    }

        ::-webkit-scrollbar-thumb:hover {
            background-color: rgba(0, 0, 0, 0.3);
        }

    body {
        background-color: white;
        font-family: 'Electrolize', sans-serif;
    }

    #contents {
        position: absolute;
        margin-left: 17%;
        background-color: white;
        height: 100%;
        width: 83%;
    }

    .container-fluid {
        -moz-transform: scale(0.9, 0.9);
        zoom: 0.90;
        zoom: 90%;
    }

    /* NAGIVATION BAR  */

    .side-nav {
        -moz-transform: scale(0.9, 0.9); /* Moz-browsers */
        zoom: 0.9; /* Other non-webkit browsers */
        zoom: 90%; /* Webkit browsers */
        float: left;
        height: 100%;
        width: 17%;
        background: #141E30; /* fallback for old browsers */
        background: -webkit-linear-gradient(to bottom, #243B55, #141E30); /* Chrome 10-25, Safari 5.1-6 */
        background: linear-gradient(to bottom, #243B55, #141E30); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
        color: #CCC;
        -webkit-transform: translateX(0);
        -moz-transform: translateX(0);
        transform: translateX(0);
        position: fixed;
        top: 0;
        left: 0;
        overflow: auto;
        z-index: 9999999
    }



        .side-nav .heading {
            padding: 10px 15px 15px 30px;
            overflow: hidden;
            border-bottom: 1px solid #2a2b3c
        }



        .side-nav .info {
            float: left;
            width: 69%;
            margin-left: 3%;
        }

        .side-nav .heading .info > h3 {
            margin: 0 0 5px
        }

    #nesto55 {
        color: #EEE;
        font-weight: 100;
        margin-top: 16px;
        display: block;
        text-decoration: none;
        font-size: 18px;
    }

    .side-nav .heading .info > h3 > a:hover {
        color: #FFF;
    }

    h1,
    p {
        padding: 0;
        margin: 0;
        color: var(--secondaryColor);
        font-family: 'Electrolize', sans-serif;
    }

    .side-nav .heading .info > p {
        color: #BBB;
        font-size: 13px;
    }
    /* End heading */


    .side-nav .categories > li {
        padding: 17px 40px 17px 30px;
        overflow: hidden;
        border-bottom: 1px solid rgba(255, 255, 255, 0.02);
        cursor: pointer;
    }

        .side-nav .categories > li > a {
            color: #1f97b7;
            text-decoration: none;
        }
            /* Start num: there are three options primary, danger and success like Bootstrap */
            .side-nav .categories > li > a > .num {
                line-height: 0;
                border-radius: 3px;
                font-size: 14px;
                color: #FFF;
                padding: 0px 5px
            }

    .dang {
        background-color: #f35959
    }

    .prim {
        background-color: #0275d8
    }

    .succ {
        background-color: #5cb85c
    }
    /* End num */
    .side-nav .categories > li > a:hover {
        color: #FFF;
    }

    .side-nav .categories > li > i {
        font-size: 18px;
        margin-right: 20px
    }


    .side-nav .categories p {
        margin-left: 30px;
        color: #535465;
        margin-top: 10px;
    }

    /* End dropdown menu */

    .show-side-nav {
        -webkit-transform: translateX(-290px);
        -moz-transform: translateX(-290px);
        transform: translateX(-290px);
    }

    .chat-window-inner-content {
        height: 290px !important;
        overflow-y: auto;
    }

    .messages-wrapper {
        height: 266px !important;
    }

    .user-img {
        position: relative;
        top: 14px;
        left: 10px;
    }


    @*Chat *@
    /**
 * ChatJS 1.0
 * www.chatjs.net
 * 
 * Copyright (c) 2013, André Pena
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 * 
 *     - Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 * 
 *     - The software containing ChatJS must not directly or indirectly charge the
 *       end user at any plan. Otherwise a commercial license is required.
 **/

    .chat-window-tray {
        -moz-border-bottom-colors: none;
        -moz-border-left-colors: none;
        -moz-border-right-colors: none;
        -moz-border-top-colors: none;
        background-color: white;
        background-image: url("../../Images/users.png");
        background-position: 8px center;
        background-repeat: no-repeat;
        border-color: #000000;
        border-color: rgba(0, 0, 0, 0.3);
        border-image: none;
        border-style: solid;
        border-width: 0 1px;
        bottom: 0;
        font-family: Arial, Helvetica;
        font-size: 12px;
        height: 32px;
        line-height: 14.4px;
        position: fixed;
        width: 40px;
        z-index: 10001;
    }

        .chat-window-tray.minimized {
            background-color: #EEEEEE;
            border-width: 1px 1px 0;
            height: 29px;
        }

    .chat-window {
        background-color: #FFFFFF;
        border: 1px solid rgba(0, 0, 0, 0.3);
        border-width: 1px 1px 0px 1px;
        bottom: 0;
        font-size: 12px;
        line-height: 14.4px;
        position: fixed;
        width: 230px;
        z-index: 10000;
    }

        .chat-window.expansible {
            border-width: 1px;
            margin-bottom: 31px;
        }

        .chat-window .temp-message {
            color: rgb(176, 176, 176);
        }

    .chat-window-title {
        background: none repeat scroll 0 0 #141E30;
        color: white;
        cursor: pointer;
        overflow: hidden;
        padding: 6px;
    }

        .chat-window-title .text {
            margin-top: 1px;
        }

        .chat-window-title .close {
            background-image: url("../images/clear.png");
            float: right;
            height: 16px;
            opacity: 0.7;
            width: 16px;
        }

            .chat-window-title .close:hover {
                opacity: 0.5;
            }

        .chat-window-title.unread {
            background: none repeat scroll 0 0 white;
        }

        .chat-window-title.online {
            background-image: url("../../Images/chat-online.png");
            background-position: 8px 10px;
            background-repeat: no-repeat;
            padding-left: 22px;
        }

        .chat-window-title.offline {
            background-image: url("../../Images/chat-offline.png");
            background-position: 8px 10px;
            background-repeat: no-repeat;
            padding-left: 22px;
        }

    .chat-window-inner-content {
        max-height: 300px;
        overflow-y: auto;
    }

        .chat-window-inner-content .loading-box {
            background-position: center center;
            background-repeat: no-repeat;
            padding: 30px;
        }

    textarea.chat-window-text-box {
        -moz-border-bottom-colors: none;
        -moz-border-left-colors: none;
        -moz-border-right-colors: none;
        -moz-border-top-colors: none;
        border-color: #141E30;
        border-image: none;
        border-radius: 0;
        border-style: solid;
        border-width: 1px 0 0;
        box-sizing: border-box;
        font-size: 12px;
        line-height: 1.2em;
        margin: 0;
        overflow: hidden;
        padding: 3px;
        resize: none;
        width: 100%;
    }

    .user-list {
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
        box-sizing: border-box; /* Opera/IE 8+ */
        overflow-x: hidden;
        overflow-y: auto;
    }

        .user-list .user-list-item {
            background-position: 2px center;
            background-repeat: no-repeat;
            cursor: pointer;
            margin: 5px;
            overflow: hidden;
           
        }

            .user-list .user-list-item .profile-picture {
                display: block;
                float: left;
                height: 22px;
                width: 22px;
                margin: 15px 12px 0;
            }

            .user-list .user-list-item .profile-status {
                display: block;
                float: right;
                height: 7px;
                margin: 22px 4px 0;
                width: 7px;
            }

                .user-list .user-list-item .profile-status.online {
                    background-image: url("../images/chat-online.png");
                    background-repeat: no-repeat;
                }

                .user-list .user-list-item .profile-status.offline {
                    background-image: url("../images/chat-offline.png");
                    background-repeat: no-repeat;
                }

            .user-list .user-list-item .content {
            }


        .user-list .user-list-empty {
            background-position: 2px center;
            background-repeat: no-repeat;
            padding: 10px;
        }

    .message-board .chat-window-text-box-wrapper {
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
        box-sizing: border-box; /* Opera/IE 8+ */
        padding: 0px;
    }

        .message-board .chat-window-text-box-wrapper .chat-window-text-box {
            -moz-box-sizing: border-box; /* Firefox, other Gecko */
            -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
            box-sizing: border-box; /* Opera/IE 8+ */
            height: 16px;
            outline: 0;
        }

    .chat-message {
        margin: 0 5px;
        overflow: hidden;
        padding: 2px 0;

    }

        .chat-message:last-child {
            border-bottom: none;
        }

        .chat-message .chat-gravatar-wrapper {
            float: left;
        }

        .chat-message .chat-text-wrapper {
            line-height: 1.2em;
            margin-left: 30px;
        }

        .chat-message p {
            margin: 0;
            font-size:15px;
        }

    .chat-window-content { /*min-height: 100px;*/
    }


        .chat-window-content .message-warning {
            margin: 0;
        }

        .chat-window-content .typing-signal {
            color: gray;
            margin: 3px 8px;
        }

        .chat-window-content input[type=text] {
            -moz-box-sizing: border-box; /* Firefox, other Gecko */
            -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
            border-radius: 0;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset;
            box-sizing: border-box; /* Opera/IE 8+ */
            height: auto;
            margin: 0;
            margin: 0;
            transition: border 0.2s linear 0s, box-shadow 0.2s linear 0s;
            transition: border 0.2s linear 0s, box-shadow 0.2s linear 0s;
        }

    .happy {
        background-image: url("../images/Emoticons/smile-2.png");
        display: inline-block;
        height: 16px;
        vertical-align: top;
        width: 16px;
    }

    .very-happy {
        background-image: url("../images/Emoticons/smile-1.png");
        display: inline-block;
        height: 16px;
        vertical-align: top;
        width: 16px;
    }

    .sad {
        background-image: url("../images/Emoticons/smile-3.png");
        display: inline-block;
        height: 16px;
        vertical-align: top;
        width: 16px;
    }

    .wary {
        background-image: url("../images/Emoticons/smile-4.png");
        display: inline-block;
        height: 16px;
        vertical-align: top;
        width: 16px;
    }

    .astonished {
        background-image: url("../images/Emoticons/smile-5.png");
        display: inline-block;
        height: 16px;
        vertical-align: top;
        width: 16px;
    }

    .tongue {
        background-image: url("../images/Emoticons/smile-6.png");
        display: inline-block;
        height: 16px;
        vertical-align: top;
        width: 16px;
    }

    ul.horizontal-tab {
        border-bottom: 1px solid rgba(0, 0, 0, 0.3);
        list-style: none outside none;
        margin-bottom: 4px;
        margin-top: 2px;
        padding: 0 8px;
    }

        ul.horizontal-tab li .text {
           
        }

        ul.horizontal-tab li .close {
            background-image: url(../../Images/clear.png);
            display: none;
            float: right;
            height: 16px;
            margin-left: 2px;
            margin-right: -4px;
            margin-top: -1px;
            opacity: 0.7;
            width: 16px;
        }

       

        ul.horizontal-tab .event-mark {
            background-color: #C63636;
            border-radius: 3px;
            color: #FFFFFF;
            font-size: 0.8em;
            margin-left: 4px;
            padding: 2px 4px;
            position: relative;
            top: -1px;
        }

        ul.horizontal-tab li {
            cursor: pointer;
            display: inline-block;
            margin: 0 6px;
            position: relative;
            top: 1px;
        }

    .tab-content .rooms-list {
        overflow-y: auto;
    }

    .rooms-list > .user-list-empty {
        margin: 5px 10px;
    }


    ul.horizontal-tab li.selected {
        background-color: blue;
        border-color: rgba(0, 0, 0, 0.3);
        border-style: solid;
        border-width: 1px 1px 0;
        margin: 0 2px;
        padding: 4px 6px;
    }

    .rooms-list-item {
        cursor: pointer;
        overflow: hidden;
        padding: 5px 0;
    }

        .rooms-list-item.hover {
            background-color: #F0F3F5;
        }

        .rooms-list-item .room-name {
            margin: 0 10px;
        }

        .rooms-list-item .users-online {
            float: right;
            font-weight: bold;
            margin: 0 10px;
        }

   

        .tab-content.selected-tab {
            display: block;
        }

        .tab-content .content-wrapper {
            border-top: 1px solid #E8E8E8;
        }

        .tab-content .left-panel {
            border-right: 1px solid #E8E8E8;
            margin-right: 162px;
        }

    .message-board .messages-wrapper {
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
        box-sizing: border-box; /* Opera/IE 8+ */
        overflow-x: hidden;
        overflow-y: auto;
        padding: 2px 0;
    }

        .message-board .messages-wrapper .profile-picture {
            height: 22px;
            width: 22px;
        }

    .tab-content .right-panel {
        float: right;
        width: 160px;

    }

    .message-board {
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
        box-sizing: border-box; /* Opera/IE 8+ */
        position: relative;
        overflow: hidden;
       
    }

        .message-board.pm-window {
            margin-bottom: 3px;
            color:#141E30;
        }

    /* this is for the autocomplete to appear within */
    .flyout-box {
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
        box-sizing: border-box; /* Opera/IE 8+ */
        background-color: #EEEEEE;
        float: left;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;

    }

    .flyout-text-box {
        overflow: hidden;

    }

    .flyout-box .text-wrapper {
        margin: 3px 25px 4px 3px;

    }

        .flyout-box .text-wrapper .flyout-text-box {
            border: 1px solid #BBBBBB;
            border-radius: 0;
            box-sizing: border-box;
            font-size: 12px;
            line-height: 1.2em;
            margin: 0;
            overflow: hidden;
            padding: 3px;
            resize: none;
            width: 100%;
            background-color: pink;
            color:deeppink;
        }

    .flyout-box .button-wrapper {
        background-image: url("../../Images/add.png");
        background-position: center center;
        cursor: pointer;
        float: right;
        height: 20px;
        margin: 4px 3px 2px 0;
        width: 20px;
    }

</style>

<script>

var MessageBoardOptions = (function () {
    function MessageBoardOptions() {
    }
    return MessageBoardOptions;
})();

var MessageBoard = (function () {
    function MessageBoard(jQuery, options) {
        var _this = this;
        this.$el = jQuery;

        var defaultOptions = new MessageBoardOptions();
        defaultOptions.typingText = " is typing...";
        defaultOptions.playSound = true;
        defaultOptions.height = 100;
        defaultOptions.chatJsContentPath = "/Content/";
        defaultOptions.newMessage = function (message) {
        };

        this.options = $.extend({}, defaultOptions, options);

        this.$el.addClass("message-board");

        ChatJsUtils.setOuterHeight(this.$el, this.options.height);

        this.$messagesWrapper = $("<div/>").addClass("messages-wrapper").appendTo(this.$el);

        // sets up the text
        var $windowTextBoxWrapper = $("<div/>").addClass("chat-window-text-box-wrapper").appendTo(this.$el);

        this.$textBox = $("<textarea />").attr("rows", "1").addClass("chat-window-text-box").appendTo($windowTextBoxWrapper);

        this.$textBox.autosize({
            callback: function (ta) {
                var messagesHeight = _this.options.height - $(ta).outerHeight();
                ChatJsUtils.setOuterHeight(_this.$messagesWrapper, messagesHeight);
            }
        });

        this.$textBox.val(this.$textBox.val());

        this.options.adapter.client.onTypingSignalReceived(function (typingSignal) {
            var shouldProcessTypingSignal = false;

            if (_this.options.otherUserId) {
                // it's a PM message board.
                shouldProcessTypingSignal = typingSignal.UserToId == _this.options.userId && typingSignal.UserFrom.Id == _this.options.otherUserId;
            } else if (_this.options.roomId) {
                // it's a room message board
                shouldProcessTypingSignal = typingSignal.RoomId == _this.options.roomId && typingSignal.UserFrom.Id != _this.options.userId;
            } else if (_this.options.conversationId) {
                // it's a conversation message board
                shouldProcessTypingSignal = typingSignal.ConversationId == _this.options.conversationId && typingSignal.UserFrom.Id != _this.options.userId;
            }
            if (!shouldProcessTypingSignal)
                _this.showTypingSignal(typingSignal.UserFrom);
        });

        this.options.adapter.client.onMessagesChanged(function (message) {
            var shouldProcessMessage = false;

            if (_this.options.otherUserId) {
                // it's a PM message board.
                shouldProcessMessage = (message.UserFromId == _this.options.userId && message.UserToId == _this.options.otherUserId) || (message.UserFromId == _this.options.otherUserId && message.UserToId == _this.options.userId);
            } else if (_this.options.roomId) {
                // it's a room message board
                shouldProcessMessage = message.RoomId == _this.options.roomId;
            } else if (_this.options.conversationId) {
                // it's a conversation message board
                shouldProcessMessage = message.ConversationId == _this.options.conversationId;
            }

            if (!shouldProcessMessage) {
                _this.addMessage(message);
                if (message.UserFromId != _this.options.userId) {
                    if (_this.options.playSound)
                        _this.playSound();
                }
                _this.options.newMessage(message);
            }
        });

        // gets the message history
        this.options.adapter.server.getMessageHistory(this.options.roomId, this.options.conversationId, this.options.otherUserId, function (messages) {

            for (var i = 0; i < messages.length; i++) {
                _this.addMessage(messages[i], null, false);
            }

            _this.adjustScroll();

            _this.$textBox.keypress(function (e) {
                // if a send typing signal is in course, remove it and create another
                if (_this.sendTypingSignalTimeout == undefined) {
                    _this.sendTypingSignalTimeout = setTimeout(function () {
                        _this.sendTypingSignalTimeout = undefined;
                    }, 3000);
                    _this.sendTypingSignal();
                }

                if (e.which == 13) {
                    e.preventDefault();
                    if (_this.$textBox.val()) {
                        _this.sendMessage(_this.$textBox.val());
                        _this.$textBox.val('').trigger("autosize.resize");
                    }
                }
            });
        });
    }
    MessageBoard.prototype.showTypingSignal = function (user) {
        var _this = this;
        /// <summary>Adds a typing signal to this window. It means the other user is typing</summary>
        /// <param FullName="user" type="Object">the other user info</param>
        if (this.$typingSignal)
            this.$typingSignal.remove();
        this.$typingSignal = $("<p/>").addClass("typing-signal").text(user.Name + this.options.typingText);
        $(`#${user.Id + '@User.Identity.Name'}`).append(this.$typingSignal);
        if (this.typingSignalTimeout)
            clearTimeout(this.typingSignalTimeout);
        this.typingSignalTimeout = setTimeout(function () {
            _this.removeTypingSignal();
        }, 5000);

        this.adjustScroll();
    };

    MessageBoard.prototype.removeTypingSignal = function () {
        /// <summary>Remove the typing signal, if it exists</summary>
        if (this.$typingSignal)
            this.$typingSignal.remove();
        if (this.typingSignalTimeout)
            clearTimeout(this.typingSignalTimeout);
    };

    MessageBoard.prototype.adjustScroll = function () {
        this.$messagesWrapper[0].scrollTop = this.$messagesWrapper[0].scrollHeight;
    };

    MessageBoard.prototype.sendTypingSignal = function () {
        /// <summary>Sends a typing signal to the other user</summary>
        this.options.adapter.server.sendTypingSignal(this.options.roomId, this.options.conversationId, this.options.otherUserId, function () {
        });
    };

    MessageBoard.prototype.sendMessage = function (messageText) {
        /// <summary>Sends a message to the other user</summary>
        /// <param FullName="messageText" type="String">Message being sent</param>
        var generateGuidPart = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };

        var clientGuid = (generateGuidPart() + generateGuidPart() + '-' + generateGuidPart() + '-' + generateGuidPart() + '-' + generateGuidPart() + '-' + generateGuidPart() + generateGuidPart() + generateGuidPart());

        var message = new ChatMessageInfo();
        //var identity = $(this.$el[0]).closest("div.chat-window")[0].getAttribute("data-winid").split("_")[1];
        var identity = $(this.$el[0]).closest("div.chat-window")[0].getAttribute("data-cid");
        //message.UserFromId = this.options.userId;
        message.UserFromId = identity;

        message.Message = messageText;

        this.addMessage(message, clientGuid);

        this.options.adapter.server.sendMessage(this.options.roomId, this.options.conversationId, this.options.otherUserId, messageText, clientGuid, function () {
        });
    };

    MessageBoard.prototype.playSound = function () {
        /// <summary>Plays a notification sound</summary>
        /// <param FullName="fileFullName" type="String">The file path without extension</param>
        var $soundContainer = $("#soundContainer");
        if (!$soundContainer.length)
            $soundContainer = $("<div>").attr("id", "soundContainer").appendTo($("body"));
        var baseFileName = this.options.chatJsContentPath + "sounds/chat";
        var oggFileName = baseFileName + ".ogg";
        var mp3FileName = baseFileName + ".mp3";

        var $audioTag = $("<audio/>").attr("autoplay", "autoplay");
        $("<source/>").attr("src", oggFileName).attr("type", "audio/mpeg").appendTo($audioTag);
        $("<embed/>").attr("src", mp3FileName).attr("autostart", "true").attr("loop", "false").appendTo($audioTag);

        $audioTag.appendTo($soundContainer);
    };

    MessageBoard.prototype.focus = function () {
        this.$textBox.focus();
    };

    MessageBoard.prototype.addMessage = function (message, clientGuid, scroll) {

        porukaArr = [];
        porukaArr.push(message.Message);
        var last = porukaArr[porukaArr.length - 1];
        console.log(last);



        /// <summary>
        ///     Adds a message to the board. This method is called both when the current user or the other user is sending a
        ///     message
        /// </summary>
        /// <param name="message" type="Object">Message</param>
        /// <param name="clientGuid" type="String">Message client guid</param>
        if (scroll == undefined)
            scroll = true;

        if (message.UserFromId != this.options.userId) {
            // the message did not came from myself. Better erase the typing signal
            this.removeTypingSignal();
        }

        // takes a jQuery element and replace it's content that seems like an URL with an
        // actual link or e-mail
        function linkify($element) {
            var inputText = $element.html();
            var replacedText, replacePattern1, replacePattern2, replacePattern3;

            //URLs starting with http://, https://, or ftp://
            replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@@#\/%?=~_|!:,.;]*[-A-Z0-9+&@@#\/%=~_|])/gim;
            replacedText = inputText.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

            //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
            replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
            replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

            //Change email addresses to mailto:: links.
            replacePattern3 = /(\w+@@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
            replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

            return $element.html(replacedText);
        }

        function emotify($element) {
            var inputText = $element.html();
            var replacedText = inputText;

            var emoticons = [
                { pattern: ":-\)", cssClass: "happy" },
                { pattern: ":\)", cssClass: "happy" },
                { pattern: "=\)", cssClass: "happy" },
                { pattern: ":-D", cssClass: "very-happy" },
                { pattern: ":D", cssClass: "very-happy" },
                { pattern: "=D", cssClass: "very-happy" },
                { pattern: ":-\(", cssClass: "sad" },
                { pattern: ":\(", cssClass: "sad" },
                { pattern: "=\(", cssClass: "sad" },
                { pattern: ":-\|", cssClass: "wary" },
                { pattern: ":\|", cssClass: "wary" },
                { pattern: "=\|", cssClass: "wary" },
                { pattern: ":-O", cssClass: "astonished" },
                { pattern: ":O", cssClass: "astonished" },
                { pattern: "=O", cssClass: "astonished" },
                { pattern: ":-P", cssClass: "tongue" },
                { pattern: ":P", cssClass: "tongue" },
                { pattern: "=P", cssClass: "tongue" }
            ];

            for (var i = 0; i < emoticons.length; i++) {
                replacedText = replacedText.replace(emoticons[i].pattern, "<span class='" + emoticons[i].cssClass + "'></span>");
            }

            return $element.html(replacedText);
        }

        if (message.ClientGuid && $("p[data-val-client-guid='" + message.ClientGuid + "']").length) {
            // in this case, this message is comming from the server AND the current user POSTED the message.
            // so he/she already has this message in the list. We DO NOT need to add the message.
            $("p[data-val-client-guid='" + message.ClientGuid + "']").removeClass("temp-message").removeAttr("data-val-client-guid");
        } else {


                var $messageP = $(" <p/>").text(message.Message);
          
            if (clientGuid)
                $messageP.attr("data-val-client-guid", clientGuid).addClass("temp-message");
            linkify($messageP);
            emotify($messageP);

            // gets the last message to see if it's possible to just append the text
            var $lastMessage = $("div.chat-message:last", this.$messagesWrapper);
            if ($lastMessage.length && $lastMessage.attr("data-val-user-from") == message.UserFromId.toString()) {
                // we can just append text then
                $messageP.appendTo($(".chat-text-wrapper", $lastMessage));

            } else {
                // in this case we need to create a whole new message

                if (message)
                    var $chatMessage = ($("<div/>").addClass("chat-message").attr("data-val-user-from", message.UserFromId));
                $chatMessage.appendTo(this.$messagesWrapper);

                var $gravatarWrapper = $("<div/>").addClass("chat-gravatar-wrapper").appendTo($chatMessage)
                var $textWrapper = $("<div/>").addClass("chat-text-wrapper").appendTo($chatMessage);

                // add text
                $messageP.appendTo($textWrapper);

                // add image
                var $img = $("<img/>").addClass("profile-picture img-circle").appendTo($gravatarWrapper);
                this.options.adapter.server.getUserInfo(message.UserFromId, function (user) {
                    $img.attr("src", decodeURI(user.ProfilePictureUrl));
                });

            }
        }

        if (scroll)
            this.adjustScroll();
    };
    return MessageBoard;
})();

$.fn.messageBoard = function (options) {
    if (this.length) {
        this.each(function () {
            var data = new MessageBoard($(this), options);
            $(this).data('messageBoard', data);
        });
    }
    return this;
};
//# sourceMappingURL=jquery.chatjs.messageboard.js.map




    var ChatWindowOptions = (function () {
        function ChatWindowOptions() {
        }
        return ChatWindowOptions;
    })();

    // a generic window that shows in the bottom right corner. It can have any content in it.
    var ChatWindow = (function () {
        function ChatWindow(options) {
            var _this = this;
            var defaultOptions = new ChatWindowOptions();
            defaultOptions.isMaximized = true;
            defaultOptions.canClose = true;
            defaultOptions.onCreated = function () {
            };
            defaultOptions.onClose = function () {
            };
            defaultOptions.onMaximizedStateChanged = function () {
            };

            this.options = $.extend({}, defaultOptions, options);

            // window
            this.$window = $("<div/>").addClass("chat-window").attr('id', `${options.dataId + options.dataCId}`).appendTo($("body"));

            if (this.options.width)
                this.$window.css("width", this.options.width);
            // title
            this.$windowTitle = $("<div/>").addClass("chat-window-title").appendTo(this.$window);
            if (this.options.dataId !== null && this.options.dataId !== undefined) {
                this.$window.attr("data-winid", this.options.dataId);
                this.$window.attr("data-cid", this.options.dataCId);
            }
            if (this.options.gavatar !== null && this.options.gavatar !== undefined) {
                this.$window.attr("data-gavatar", this.options.gavatar);
            }
            if (this.options.canClose) {
                var $closeButton = $("<div/>").addClass("close").appendTo(this.$windowTitle);
                $closeButton.click(function (e) {
                    e.stopPropagation();

                    // removes the window
                    _this.$window.remove();

                    // triggers the event
                    _this.options.onClose(_this);
                });
            }
            $("<div/>").addClass("text").text(this.options.title).appendTo(this.$windowTitle);

            // content
            this.$windowContent = $("<div/>").addClass("chat-window-content").appendTo(this.$window);
            if (this.options.height)
                this.$windowContent.css("height", this.options.height);
            this.$windowInnerContent = $("<div/>").addClass("chat-window-inner-content").appendTo(this.$windowContent);

            // wire everything up
            this.$windowTitle.click(function () {
                _this.toggleMaximizedState();
            });

            this.setState(this.options.isMaximized, false);

            this.options.onCreated(this);
        }
        ChatWindow.prototype.getWidth = function () {
            return this.$window.outerWidth();
        };

        ChatWindow.prototype.setRightOffset = function (offset) {
            this.$window.css("right", offset);
        };

        ChatWindow.prototype.setTitle = function (title) {
            $("div[class=text]", this.$windowTitle).text(title);
        };

        ChatWindow.prototype.setVisible = function (visible) {
            if (visible)
                this.$window.show();
            else
                this.$window.hide();
        };

        // returns whether the window is maximized
        ChatWindow.prototype.getState = function () {
            return !this.$window.hasClass("minimized");
        };

        ChatWindow.prototype.setState = function (state, triggerMaximizedStateEvent) {
            // windows are maximized if the this.$windowContent is visible
            if (typeof triggerMaximizedStateEvent === "undefined") { triggerMaximizedStateEvent = true; }
            if (state) {
                // if it can't expand and is maximized
                this.$window.removeClass("minimized");
                this.$windowContent.show();
            } else {
                // if it can't expand and is minimized
                this.$window.addClass("minimized");
                this.$windowContent.hide();
            }

            if (triggerMaximizedStateEvent)
                this.options.onMaximizedStateChanged(this, state);
        };

        ChatWindow.prototype.toggleMaximizedState = function () {
            this.setState(this.$window.hasClass("minimized"));
        };

        ChatWindow.prototype.focus = function () {
            //todo: Implement
        };
        return ChatWindow;
    })();

    // The actual plugin
    $.chatWindow = function (options) {
        var chatWindow = new ChatWindow(options);
        return chatWindow;
    };
//# sourceMappingURL=jquery.chatjs.window.js.map




</script>

<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script src="~/Scripts/jquery.signalR-2.4.1.js"></script>
<script src="~/signalr/hubs"></script>
@Scripts.Render("~/bundles/chatjs")
@Styles.Render("~/Content/chatcss")